---
import ThemeToggle from './ThemeToggle.astro';
import LanguageSelector from './LanguageSelector.astro';

import { en } from '@/i18n/en';
import { es } from '@/i18n/es';
import type { i18nUI } from '@/i18n/i18n.type';
import type { Languages } from '@/i18n/Language';

const lang: Languages = Astro.props.lang ?? 'en';

const translations = { es, en };
const { nav }: i18nUI = translations[lang];

const navItems = [
    {
        title: `${nav.experience}`,
        label: `${nav.experience}`,
        url: '/#Experiences',
    },
    {
        title: `${nav.project}`,
        label: `${nav.project}`,
        url: '/#Project',
    },
    {
        title: `${nav.about}`,
        label: `${nav.about}`,
        url: '/#About-me',
    },
    // {
    //     title: 'Contact',
    //     label: 'Contact',
    //     url: '/#Contact-me',
    // },
];
---

<header
    class='fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2'
>
    <nav
        class='flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center'
    >
        {
            navItems.map((link) => (
                <a
                    class='relative block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400 text-center'
                    id={link.label}
                    role='button'
                    aria-label={link.label}
                    href={link.url}
                >
                    {link.title}
                </a>
            ))
        }
        <ThemeToggle lang={lang} />
        <LanguageSelector lang={lang} />
    </nav>
</header>

<script>
    document.addEventListener('astro:page-load', () => {
        const sections = document.querySelectorAll('section');
        const navItems = document.querySelectorAll('header nav a');

        const callback = (entries: any[]) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    navItems.forEach((item) => {
                        if (
                            item.getAttribute('aria-label') == entry.target.id
                        ) {
                            item.classList.add('text-yellow-500');
                        } else {
                            item.classList.remove('text-yellow-500');
                        }
                    });
                }
            });
        };

        const observer = new IntersectionObserver(callback, {
            root: null,
            rootMargin: '0px',
            threshold: 0.3,
        });

        sections.forEach((section) => {
            observer.observe(section);
        });

        // Cleanup function
        document.onvisibilitychange = () => {
            if (document.visibilityState === 'hidden') {
                observer.disconnect();
            } else {
                sections.forEach((section) => {
                    observer.observe(section);
                });
            }
        };
    });
</script>

<style>
    nav {
        animation: nav-shadown 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    @keyframes nav-shadown {
        to {
            @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
        }
    }
</style>
